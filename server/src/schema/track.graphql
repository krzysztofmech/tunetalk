scalar Object
type Track {
  album: TrackAlbum
  artists: [Artist]
  available_markets: [String]
  disc_number: Int
  duration_ms: Int
  explicit: Boolean
  external_ids: ExternalId
  external_urls: ExternalUrl
  href: String
  id: String
  is_playable: Boolean
  linked_from: Object
  restrictions: Restriction
  name: String
  popularity: Int
  preview_url: String
  track_number: Int
  type: String
  uri: String
  is_local: Boolean
}

type TrackAlbum {
  album_type: String
  total_tracks: Int
  available_markets: [String]
  external_urls: ExternalUrl
  href: String
  id: String
  images: [Image]
  name: String
  release_date: String
  release_date_precision: String
  restrictions: Restriction
  type: String
  uri: String
  copyrights: Copyright
  external_ids: ExternalId
  genres: [String]
  label: String
  popularity: Int
  album_group: String
  artists: [TrackAlbumArtist]
}

type TrackAlbumArtist {
  external_urls: ExternalUrl
  href: String
  id: String
  name: String
  type: String
  uri: String
}

enum TimeRange {
  short_term
  medium_term
  long_term
}

type TopTracksResponse {
  href: String
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
  items: [Track]
}

type Query {
  topTracks(
    limit: Int!
    offset: Int!
    time_range: TimeRange!
  ): TopTracksResponse
}
